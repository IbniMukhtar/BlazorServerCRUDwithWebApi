@page "/calculator"
@using System.Data
@inject IJSRuntime JSRuntime
<style>
    .calculator {
        width: 50%;
        background-color: #f0f0f0;
        border-radius: 10px;
        box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.1);
        padding: 10px;
        margin: 80px auto;
    }

    .calculator-display {
        font-size: 24px;
        height:40px;
        overflow: hidden;
        white-space: nowrap; /* Prevent wrapping to keep numbers in one line */
        background-color: #fff;
        color: #333;
        text-align: right;
        padding: 10px;
        margin-bottom: 20px;
    }

    .calculator-body {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        grid-gap: 10px;
    }

    .calculator-button {
        font-size: 20px;
        padding: 10px;
        background-color: #fff;
        border: 1px solid #ccc;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .calculator-button:hover {
            background-color: #f0f0f0;
        }

    .number {
        grid-column: span 1;
    }

    .equals {
        grid-column: span 2;
    }

    .clear {
        background-color: #ff6347;
        color: #fff;
        grid-column: span 2;
    }

        .clear:hover {
            background-color: #cc4731;
        }

</style>

<div class="calculator">
    <p id="result" class="calculator-display" @ref="displayRef">@displayValue</p>

    <div class="calculator-body">
        @foreach (var button in buttons)
        {
            <button type="button" class="calculator-button @(button.CssClass)" @onclick="() => OnButtonClick(button.Value!)"><b>@button.Text</b></button>
        }
    </div>
</div>

@code {
    private string displayValue = "";
    private string currentNumber = "";
    private string currentOperation = "";
    private ElementReference displayRef;

    private class Button
    {
        public string? Text { get; set; }
        public string? Value { get; set; }
        public string? CssClass { get; set; }
    }

    private Button[] buttons = new Button[]
    {
        new Button { Text = "AC", Value = "AC", CssClass = "clear" },
        new Button { Text = "X", Value = "Backspace", CssClass = "number" },
        new Button { Text = "+", Value = "+", CssClass = "operand" },

        new Button { Text = "1", Value = "1", CssClass = "number" },
        new Button { Text = "2", Value = "2", CssClass = "number" },
        new Button { Text = "3", Value = "3", CssClass = "number" },
        new Button { Text = "-", Value = "-", CssClass = "operand" },

        new Button { Text = "4", Value = "4", CssClass = "number" },
        new Button { Text = "5", Value = "5", CssClass = "number" },
        new Button { Text = "6", Value = "6", CssClass = "number" },
        new Button { Text = "*", Value = "*", CssClass = "operand" },

        new Button { Text = "7", Value = "7", CssClass = "number" },
        new Button { Text = "8", Value = "8", CssClass = "number" },
        new Button { Text = "9", Value = "9", CssClass = "number" },
        new Button { Text = "/", Value = "/", CssClass = "operand" },

        new Button { Text = ".", Value = ".", CssClass = "number" },
        new Button { Text = "0", Value = "0", CssClass = "number" },
        new Button { Text = "=", Value = "=", CssClass = "equals" },


    };

    private async Task OnButtonClick(string value)
    {
        if (value == "=")
        {
            PerformCalculation();
        }
        else if (value == "AC")
        {
            Clear();
        }
        else if (value == "Backspace")
        {
            displayValue = displayValue.Substring(0, displayValue.Length - 1);
        }
        else if (IsOperand(value))
        {
            if (!IsOperand(displayValue.Substring(displayValue.Length - 1)))
            {
                displayValue += value;
                await ScrollDisplayToEnd();
            }
            else
            {
                // Replace the last operand with the new one
                displayValue = displayValue.Substring(0, displayValue.Length - 1) + value;
            }
        }
        else
        {
            displayValue += value;
            await ScrollDisplayToEnd();
        }
    }

    private bool IsOperand(string value)
    {
        return value == "+" || value == "-" || value == "*" || value == "/";
    }

    private void PerformCalculation()
    {
        try
        {
            DataTable dt = new DataTable();
            var result = dt.Compute(displayValue, null);
            displayValue = result.ToString()!;
        }
        catch
        {
            displayValue = "Error";
        }
    }

    private void Clear()
    {
        displayValue = "";
        currentNumber = "";
        currentOperation = "";
    }
    private async Task ScrollDisplayToEnd()
    {
        // Scroll the display area to the rightmost position
        await JSRuntime.InvokeVoidAsync("scrollToEnd", displayRef);
    }
}

<script>
    window.scrollToEnd = function (element) {
        // Scroll the element to its rightmost position
        element.scrollLeft = element.scrollWidth;
    }
</script>